name: Orca tests
on: [ push, pull_request ]
jobs:
  run-orca-test_docker:
    strategy:
      fail-fast: false
      matrix:
        orca_base_docker_image_name:
          - 'ubuntu'
        orca_base_docker_image_version:
          - 'jammy'
          - 'focal'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Create Liferay license file (mock)
        run: echo '<?xml version="1.0"?><license>...</license>' > orca/configs/liferay-license.xml
      - run: docker version
      - name: Run orca-test with Gradle
        uses: gradle/gradle-build-action@v2
        env:
          DOCKER_BUILDKIT: 1
        with:
          build-root-directory: orca-test
          arguments: |
            test
            -Porca.runtime.impl=docker
            -Porca.docker.base.docker.image=${{ matrix.orca_base_docker_image_name }}:${{ matrix.orca_base_docker_image_version }}
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          # ':' not allowed in name
          name: test-results_native_${{ matrix.orca_base_docker_image_name }}-${{ matrix.orca_base_docker_image_version }}
          path: "orca-test/build/test-results/test/**/*.xml"

#      - name: Publish Test Results
#        uses: EnricoMi/publish-unit-test-result-action@v2
#        if: always()
#        with:
#          junit_files: "orca-test/build/test-results/test/**/*.xml"
#          check_name: Test Results (docker Orca runtime, ${{ matrix.orca_base_docker_image_name }}-${{ matrix.orca_base_docker_image_version }})

  run-orca-test_native:
    strategy:
      fail-fast: false
      matrix:
        runs_on:
          - 'ubuntu-22.04'
          - 'ubuntu-20.04'
    runs-on: ${{ matrix.runs_on }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Create Liferay license file (mock)
        run: echo '<?xml version="1.0"?><license>...</license>' > orca/configs/liferay-license.xml
      - name: Install Orca and its dependencies
        run: |
          # This will:
          #   * install depedencies (therefore we need sudo) and
          #   * pull the 'master' copy and put 'orca' on PATH pointing to the 'master' home
          chmod a+x orca/scripts/install_orca.sh
          sudo orca/scripts/install_orca.sh
      - name: Run orca-test with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: orca-test
          # Make sure we test the fetched version of Orca, not the pulled 'master'
          arguments: |
            test
            -Porca.runtime.impl=native
            -Porca.native.orca.home.dir=../orca
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results_native_${{ matrix.runs_on }}
          path: "orca-test/build/test-results/test/**/*.xml"

#      - name: Publish Test Results
#        uses: EnricoMi/publish-unit-test-result-action@v2
#        if: always()
#        with:
#          junit_files: "orca-test/build/test-results/test/**/*.xml"
#          check_name: Test Results (native Orca runtime, ${{ matrix.runs_on }})

  publish-test-results:
    name: "Publish Tests Results"
    needs:
      - run-orca-test_docker
      - run-orca-test_native
    runs-on: ubuntu-latest
    permissions:
      checks: write

      # only needed unless run with comment_mode: off
      pull-requests: write

      # only needed for private repository
      contents: read

      # only needed for private repository
      issues: read
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: "artifacts/**/*.xml"